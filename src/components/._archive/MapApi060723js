// src/components/MapApi060723.js
import mapboxgl from "mapbox-gl";
const MapApi = {
  apiKey:
    "pk.eyJ1IjoibmV1bWFkIiwiYSI6ImNsaHZxdzJrMDBhbjkzZm4weXI1bGlybTMifQ.oQDmvQmIA04AVPDNOV-l8Q",
  initializeMap: (mapData) => {
    mapboxgl.accessToken = MapApi.apiKey;
    //   const { title, slug, thumbnail, category, section, tag } = featuredBlog;
    const map = new mapboxgl.Map({
      container: "map", // Replace with the ID of your map container element
      style: "mapbox://styles/neumad/cli7nxj9700wz01r50nn9d19d", // Replace with your desired map style
      center: [-77.04, 38.907], // Replace with the geolocation of your map center or use mapData
      zoom: 12  , // Replace with your desired initial zoom level
    });
    map.on("load", () => {
      map.addSource("places", {
        // This GeoJSON contains features that include an "icon"
        // property. The value of the "icon" property corresponds
        // to an image in the Mapbox Streets style's sprite.
        type: "geojson",
        data: {
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Make it Mount Pleasant</strong><p><a href="http://www.mtpleasantdc.com/makeitmtpleasant" target="_blank" title="Opens in a new window">Make it Mount Pleasant</a> is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.</p>',
                icon: "theatre",
                // thumbnail: "https://images.ctfassets.net/i1hcb4885ci0/2h2N1ZQeMcogi3AszCYHD8/09d375d3b7686768cfdd0766ba64606a/article_work_topWeworkAmerica_thumbnail_20230319.png",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.038659, 38.931567],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Mad Men Season Five Finale Watch Party</strong><p>Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a <a href="http://madmens5finale.eventbrite.com/" target="_blank" title="Opens in a new window">Mad Men Season Five Finale Watch Party</a>, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.</p>',
                icon: "theatre",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.003168, 38.894651],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Big Backyard Beach Bash and Wine Fest</strong><p>EatBar (2761 Washington Boulevard Arlington VA) is throwing a <a href="http://tallulaeatbar.ticketleap.com/2012beachblanket/" target="_blank" title="Opens in a new window">Big Backyard Beach Bash and Wine Fest</a> on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.grill hot dogs.</p>',
                icon: "bar",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.090372, 38.881189],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Ballston Arts & Crafts Market</strong><p>The <a href="http://ballstonarts-craftsmarket.blogspot.com/" target="_blank" title="Opens in a new window">Ballston Arts & Crafts Market</a> sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.</p>',
                icon: "art-gallery",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.111561, 38.882342],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Seersucker Bike Ride and Social</strong><p>Feeling dandy? Get fancy, grab your bike, and take part in this year\'s <a href="http://dandiesandquaintrelles.com/2012/04/the-seersucker-social-is-set-for-june-9th-save-the-date-and-start-planning-your-look/" target="_blank" title="Opens in a new window">Seersucker Social</a> bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.</p>',
                icon: "bicycle",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.052477, 38.943951],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Capital Pride Parade</strong><p>The annual <a href="http://www.capitalpride.org/parade" target="_blank" title="Opens in a new window">Capital Pride Parade</a> makes its way through Dupont this Saturday. 4:30 p.m. Free.</p>',
                icon: "rocket",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.043444, 38.909664],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Muhsinah</strong><p>Jazz-influenced hip hop artist <a href="http://www.muhsinah.com" target="_blank" title="Opens in a new window">Muhsinah</a> plays the <a href="http://www.blackcatdc.com">Black Cat</a> (1811 14th Street NW) tonight with <a href="http://www.exitclov.com" target="_blank" title="Opens in a new window">Exit Clov</a> and <a href="http://godsilla.bandcamp.com" target="_blank" title="Opens in a new window">Godsâ€™illa</a>. 9:00 p.m. $12.</p>',
                icon: "music",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.031706, 38.914581],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>A Little Night Music</strong><p>The Arlington Players\' production of Stephen Sondheim\'s  <a href="http://www.thearlingtonplayers.org/drupal-6.20/node/4661/show" target="_blank" title="Opens in a new window"><em>A Little Night Music</em></a> comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.</p>',
                icon: "music",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.020945, 38.878241],
              },
            },
            {
              type: "Feature",
              properties: {
                description:
                  '<strong>Truckeroo</strong><p><a href="http://www.truckeroodc.com/www/" target="_blank">Truckeroo</a> brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.</p>',
                icon: "music",
              },
              geometry: {
                type: "Point",
                geolocation: [-77.007481, 38.876516],
              },
            },
          ],
        },
      });
      // Add a layer showing the places.
      map.addLayer({
        id: "places",
        type: "symbol",
        source: "places",
        layout: {
          "icon-image": ["get", "icon"],
          "icon-allow-overlap": true,
        },
      });

      // When a click event occurs on a feature in the places layer, open a popup at the
      // location of the feature, with description HTML from its properties.
      map.on("click", "places", (e) => {
        // Copy geolocation array.
        const geolocation = e.features[0].geometry.geolocation.slice();
        const description = e.features[0].properties.description;

        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - geolocation[0]) > 180) {
          geolocation[0] += e.lngLat.lng > geolocation[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
          .setLngLat(geolocation)
          .setHTML(description)
          .addTo(map);
      });

      // Change the cursor to a pointer when the mouse is over the places layer.
      map.on("mouseenter", "places", () => {
        map.getCanvas().style.cursor = "pointer";
      });

      // Change it back to a pointer when it leaves.
      map.on("mouseleave", "places", () => {
        map.getCanvas().style.cursor = "";
      });
    });
  },
};

export default MapApi;

// FeaturedBlog.js
// const FeaturedBlog = {
//     render: (featuredBlog) => {
//       const { title, slug, thumbnail, category, section, tag } = featuredBlog;

//       return `
//       <!--FEATURED BLOG-->
//     <div class="featured-blog">
//         <div class="featured-blog-img">
//             <a href="/#/article/${category}/${slug}">
//                 <img src="${thumbnail}" alt="" />
//             </a>
//         </div>

//       <div class="featured-blog-text">
//         <div class="featured-blog-header">
//           <a href="/#/article/${category}/${slug}">
//             <div class="featured-blog-header-container">
//               <span class="featured-blog-title-text header04">
//                 ${title}
//               </span>
//             </div>
//           </a>
//         </div>

//         <div class="featured-blog-data">
//           <div class="tag-collection">
//             <div class="featured-blog-data-container">
//               <a href="/#/${section}">
//                 <div class="section-tag" id="${section}">
//                   <i class="section-tag-icon icon-${section}"></i>
//                   <span class="section-tag-divider">
//                     <div class="lineV"></div>
//                   </span>
//                   <span class="section-tag-text medium00">
//                     ${section}
//                   </span>
//                 </div>
//               </a>
//             </div>

//             <div class="nav-list-divider">
//               <div class="lineV"></div>
//             </div>

//             <div class="featured-blog-data-container">
//               <div class="metadata-tag">
//                 <span class="metadata-tag-text text01">${tag}</span>
//               </div>
//             </div>
//           </div>

//           <div class="data-time">
//             <span class="data-time-text text01">2m Read</span>
//           </div>
//         </div>

//         <div class="lineH"></div>
//       </div>
//     </div>
//   `;
//   },
// };

// export default FeaturedBlog;

// src/components/MapApi.js

// import mapboxgl from 'mapbox-gl';

// const MapApi= () =>{
//     mapboxgl.accessToken = 'pk.eyJ1IjoibmV1bWFkIiwiYSI6ImNsaHZxdzJrMDBhbjkzZm4weXI1bGlybTMifQ.oQDmvQmIA04AVPDNOV-l8Q';
//     const fsqAPIToken = 'fsq3mAOzlnXFllXn4EtxO++3twd0owDAPohFD9xpa89k7sM=';
//     let userLat = 40.7128;
//     let userLng = -74.0060;
//     let sessionToken = generateRandomSessionToken();
//     const inputField = document.getElementById('explorer-search');
//     const dropDownField = document.getElementById('explorer-dropdown');
//     const ulField = document.getElementById('explorer-suggestions');
//     const errorField = document.getElementById('explorer-error');
//     const notFoundField = document.getElementById('explorer-not-found');

//     const onChangeAutoComplete = debounce(changeAutoComplete);
//     inputField.addEventListener('input', onChangeAutoComplete);
//     ulField.addEventListener('click', selectItem);

//     function success(pos) {
//       const { latitude, longitude } = pos.coords;
//       userLat = latitude;
//       userLng = longitude;
//       flyToLocation(userLat, userLng);
//     }

//     function logError(err) {
//       console.warn(`ERROR(${err.code}): ${err.message}`);
//     }

//     navigator.geolocation.getCurrentPosition(success, logError, {
//       enableHighAccuracy: true,
//       timeout: 5000,
//       maximumAge: 0,
//     });

//     const map = new mapboxgl.Map({
//       container: 'map',
//       style: 'mapbox://styles/mapbox/light-v10',
//       center: [userLng, userLat],
//       zoom: 12,
//     });

//     map.addControl(new mapboxgl.GeolocateControl());
//     map.addControl(new mapboxgl.NavigationControl());

//     let currentMarker;

//     /* Generate a random string with 32 characters.
//        Session Token is a user-generated token to identify a session for billing purposes.
//        Learn more about session tokens.
//        https://docs.foursquare.com/reference/session-tokens
//     */
//     function generateRandomSessionToken(length = 32) {
//       let result = '';
//       const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
//       for (let i = 0; i < length; i++) {
//         result += characters[Math.floor(Math.random() * characters.length)];
//       }
//       return result;
//     }

//     let isFetching = false;
//     async function changeAutoComplete({ target }) {
//       const { value: inputSearch = '' } = target;
//       ulField.innerHTML = '';
//       notFoundField.style.display = 'none';
//       errorField.style.display = 'none';
//       if (inputSearch.length && !isFetching) {
//         try {
//           isFetching = true;
//           const results = await autoComplete(inputSearch);
//           if (results && results.length) {
//             results.forEach((value) => {
//               addItem(value);
//             });
//           } else {
//             notFoundField.innerHTML = `Foursquare can't
//             find ${inputSearch}. Make sure your search is spelled correctly.
//             <a href="https://foursquare.com/add-place?ll=${userLat}%2C${userLng}&venuename=${inputSearch}"
//               target="_blank" rel="noopener noreferrer">Don't see the place you're looking for?</a>.`;
//             notFoundField.style.display = 'block';
//           }
//         } catch (err) {
//           errorField.style.display = 'block';
//           logError(err);
//         } finally {
//           isFetching = false;
//           dropDownField.style.display = 'block';
//         }
//       } else {
//         dropDownField.style.display = 'none';
//       }
//     }

//     async function autoComplete(query) {
//       const { lng, lat } = map.getCenter();
//       userLat = lat;
//       userLng = lng;
//       try {
//         const searchParams = new URLSearchParams({
//           query,
//           types: 'place',
//           ll: `${userLat},${userLng}`,
//           radius: 50000,
//           session_token: sessionToken,
//         }).toString();
//         const searchResults = await fetch(
//           `https://api.foursquare.com/v3/autocomplete?${searchParams}`,
//           {
//             method: 'get',
//             headers: new Headers({
//               Accept: 'application/json',
//               Authorization: fsqAPIToken,
//             }),
//           }
//         );
//         const data = await searchResults.json();
//         return data.results;
//       } catch (error) {
//         throw error;
//       }
//     }

//     function addItem(value) {
//       const placeDetail = value[value.type];
//       if (!placeDetail || !placeDetail.geocodes || !placeDetail.geocodes.main) return;
//       const { latitude, longitude } = placeDetail.geocodes.main;
//       const fsqId = placeDetail.fsq_id;
//       const dataObject = JSON.stringify({ latitude, longitude, fsqId });
//       ulField.innerHTML +=
//       `<li class="explorer--dropdown-item" data-object='${dataObject}'>
//         <div>${highlightedNameElement(value.text)}</div>
//         <div class="explorer--secondary-text">${value.text.secondary}</div>
//       </li>`;
//     }

//     async function selectItem({ target }) {
//       if (target.tagName === 'LI') {
//         const valueObject = JSON.parse(target.dataset.object);
//         const { latitude, longitude, fsqId } = valueObject;
//         const placeDetail = await fetchPlacesDetails(fsqId);
//         addMarkerAndPopup(latitude, longitude, placeDetail);
//         flyToLocation(latitude, longitude);

//         // generate new session token after a complete search
//         sessionToken = generateRandomSessionToken();
//         const name = target.dataset.name;
//         inputField.value = target.children[0].textContent;
//         dropDownField.style.display = 'none';
//       }
//     }

//     async function fetchPlacesDetails(fsqId) {
//       try {
//         const searchParams = new URLSearchParams({
//           fields: 'fsq_id,name,geocodes,location,photos,rating',
//           session_token: sessionToken,
//         }).toString();
//         const results = await fetch(
//           `https://api.foursquare.com/v3/places/${fsqId}?${searchParams}`,
//           {
//             method: 'get',
//             headers: new Headers({
//               Accept: 'application/json',
//               Authorization: fsqAPIToken,
//             }),
//           }
//         );
//         const data = await results.json();
//         return data;
//       } catch (err) {
//         logError(err);
//       }
//     }

//     function createPopup(placeDetail) {
//       const { location = {}, name = '', photos = [], rating } = placeDetail;
//       let photoUrl = 'https://files.readme.io/c163d6e-placeholder.svg';
//       if (photos.length && photos[0]) {
//         photoUrl = `${photos[0].prefix}56${photos[0].suffix}`;
//       }
//       const popupHTML = `<div class="explorer--popup explorer--text">
//         <image class="explorer--popup-image" src="${photoUrl}" alt="photo of ${name}"/>
//         <div class="explorer--popup-description">
//           <div class="explorer--bold">${name}</div>
//           <div class="explorer--secondary-text">${location.address}</div>
//         </div>
//         ${rating ? `<div class="explorer--popup-rating">${rating}</div>` : `<div />`}
//       </div>`;

//       const markerHeight = 35;
//       const markerRadius = 14;
//       const linearOffset = 8;
//       const verticalOffset = 8;
//       const popupOffsets = {
//         top: [0, verticalOffset],
//         'top-left': [0, verticalOffset],
//         'top-right': [0, verticalOffset],
//         bottom: [0, -(markerHeight + verticalOffset)],
//         'bottom-left': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
//         'bottom-right': [0, (markerHeight + verticalOffset - markerRadius + linearOffset) * -1],
//         left: [markerRadius + linearOffset, (markerHeight - markerRadius) * -1],
//         right: [-(markerRadius + linearOffset), (markerHeight - markerRadius) * -1],
//       };
//       return new mapboxgl.Popup({
//         offset: popupOffsets,
//         closeButton: false,
//       }).setHTML(popupHTML);
//     }

//     function addMarkerAndPopup(lat, lng, placeDetail) {
//       if (currentMarker) currentMarker.remove();
//       currentMarker = new mapboxgl.Marker({
//         color: '#3333FF',
//       })
//         .setLngLat([lng, lat])
//         .setPopup(createPopup(placeDetail))
//         .addTo(map);

//       currentMarker.togglePopup();
//     }

//     function flyToLocation(lat, lng) {
//       map.flyTo({
//         center: [lng, lat],
//       });
//     }

//     function highlightedNameElement(textObject) {
//       if (!textObject) return '';
//       const { primary, highlight } = textObject;
//       if (highlight && highlight.length) {
//         let beginning = 0;
//         let hightligtedWords = '';
//         for (let i = 0; i < highlight.length; i++) {
//           const { start, length } = highlight[i];
//           hightligtedWords += primary.substr(beginning, start - beginning);
//           hightligtedWords += '<b>' + primary.substr(start, length) + '</b>';
//           beginning = start + length;
//         }
//         hightligtedWords += primary.substr(beginning);
//         return hightligtedWords;
//       }
//       return primary;
//     }

//     function debounce(func, timeout = 300) {
//       let timer;
//       return (...args) => {
//         clearTimeout(timer);
//         timer = setTimeout(() => {
//           func.apply(this, args);
//         }, timeout);
//       };
//     }
//   }

//   export default MapApi();

// const MapApi = {
//     apiKey: "pk.eyJ1IjoibmV1bWFkIiwiYSI6ImNsaHZxdzJrMDBhbjkzZm4weXI1bGlybTMifQ.oQDmvQmIA04AVPDNOV-l8Q",
//   };

//   export default MapApi;
